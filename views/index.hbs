<head>
  <script   src="https://code.jquery.com/jquery-2.2.3.min.js"   integrity="sha256-a23g1Nt4dtEYOj7bR+vTu7+T8VP13humZFBJNIYoEJo="   crossorigin="anonymous"></script>
</head>


<h1>{{title}}</h1>
<p id="updated-at">Updating...</p>

<h2>45th and 5th</h2>
<ul id="arrivals">
  <li>No buses :(</li>
</ul>
<canvas id="clock" height="500" width="500"></canvas>
<script src=" ../js/analog-clock.js"></script>

<script>
  var clock = new AnalogClock($("#clock")[0], {
    // buses: upcoming, //[1,2,3],  //upcoming array
    clockWidth:450,
    layout: function(canvas) {
      //'this' is spec in the class
      console.log(this.buses);

      //draw a circle for each bus around the perimeter of the clock
      var ctx = canvas.getContext("2d");
      var centerX = canvas.width / 2;
      var centerY = canvas.height / 2;
      var r = this.clockWidth/2-14;

      //draw circles for each upcoming bus
      //center for each bus dot is: angle is minutes, radius is inside the minute hand length
      this.buses.map(function(icon, index, array) {
        //convert CW minutes into CCW radians
        var minutes = new Date(icon.arrivalTime)
        var angle = Math.PI/2 - (2 * minutes.getMinutes()/ 60 * Math.PI)

        var x = centerX + Math.cos(angle)*r
        var y = centerY - Math.sin(angle)*r  //flip upside down

        console.log(angle + " " + minutes.getMinutes());
        ctx.beginPath()
        ctx.arc(x, y, 10, 0, Math.PI * 2, false)
        ctx.fillStyle = 'blue'
        ctx.fill();
        ctx.closePath();
      })
    }
  });
  clock.begin();


  $.getJSON("/clock/bustime", function(arrivals) {

    var now = new Date();
    $("#updated-at").html(now);

    var timeToArrival = function() {
      //return a function that compares given times with the time this function was created
      return function(arrivalTime) {
        var nownow = now.getTime()
        var arr = new Date(arrivalTime)

        return (arr.getTime() - nownow)/1000/60;
      }
    }();

    var walkToStation = 0;

    var upcoming = arrivals.filter(function(bus) {
      //arrival time exists, greater than time to walk to station, and less than 1 hour
      return (bus.arrivalTime !== null) && (timeToArrival(bus.arrivalTime) > (walkToStation * 60 * 1000)) && (timeToArrival(bus.arrivalTime)<60)
    });

    //create new clock
    //tell it how to show the buses
    clock.setBuses(upcoming);

    //redraw once per second
    // clock.tick();
    // window.setInterval(clock.tick, 1000);


    $("#arrivals").html(
      // if (arrivals.length<0) {
      upcoming.map(function (bus, index, array) {
            return "<li>"+timeToArrival(bus.arrivalTime) + " minutes</li> ("+ bus.distances.PresentableDistance +")";
      })
      .join("\n"));

  });
</script>
