<head>
  <script   src="https://code.jquery.com/jquery-2.2.3.min.js"   integrity="sha256-a23g1Nt4dtEYOj7bR+vTu7+T8VP13humZFBJNIYoEJo="   crossorigin="anonymous"></script>
</head>


<h1>{{title}}</h1>
<p id="updated-at">Updating...</p>

<h2>45th and 5th</h2>
<ul id="arrivals">
  <li>No buses :(</li>
</ul>
<canvas id="clock" height="500" width="500"></canvas>
<script>
/**
 * Setup and start an analog clock using a canvas
 * @param canvas The canvas to use
 * @param clockWidth The width of the clock (radius*2)
 * @author Lyndon Armitage
 */

// clock object has draw function that shows static, hands, and milestones?

//PLAYER OBJECT DEFINITION
var AnalogClock= function(canvas, spec) {
  //spec is options sent to constructor
  spec.canvas = canvas;

  //appointments are items to show on the clock according to layout function
  spec.buses = spec.buses||[];

  //canvas is required
  spec.clockWidth = spec.clockWidth||canvas.width

  var interval = null;

  console.log("create Analog Clock object");


  var that={};


  var resetInt = function() {
    window.cancelAnimationFrame(interval)
  }

  var drawStatic = function(ctx) {
    var centerX = spec.canvas.width / 2;
    var centerY = spec.canvas.height / 2;
    var clockWidth = spec.clockWidth;

    ctx.beginPath();
    ctx.arc(centerX, centerY, clockWidth/2, 0, 2 * Math.PI, false);
    ctx.strokeStyle = "black";
    ctx.lineWidth = 2;
    ctx.stroke();
    ctx.closePath();

    ctx.beginPath();
    ctx.arc(centerX, centerY, 2, 0, 2 * Math.PI, false);
    ctx.fillStyle = "black";
    ctx.fill();
    ctx.closePath();

    drawNumbers();

    function drawNumbers() {

      var i = 12;
      ctx.strokeStyle = "black";
      ctx.lineWidth = 2;
      while(i > 0) {
        ctx.save();
        ctx.beginPath();
        ctx.translate(centerX, centerY);
        var angle = (i * 30) * Math.PI/180;
        ctx.rotate(angle);
        ctx.translate(0, -clockWidth/2);

        // Drawing numbers doesn't look so good because of the origin of the text
        ctx.save();
        ctx.translate(0, -10);
        ctx.rotate(-angle);
        ctx.fillText(i, -3, 0);
        ctx.restore();

        ctx.moveTo(0, 0);
        ctx.lineTo(0, 10);
        ctx.stroke();
        ctx.closePath();
        ctx.restore();
        i --;
      }
    }
  }
  var drawHand = function(ctx, length, angle) {
    var centerX = spec.canvas.width / 2;
    var centerY = spec.canvas.height / 2;

    ctx.save();
    ctx.beginPath();
    ctx.translate(centerX, centerY);
    ctx.rotate(-180 * Math.PI/180); // Correct for top left origin
    ctx.rotate(angle * Math.PI/180);
    ctx.moveTo(0, 0);
    ctx.lineTo(0, length);
    ctx.stroke();
    ctx.closePath();
    ctx.restore();
  }


  //layout is a function that is called with tick, and has a reference to the same canvas
  var tick = function (deltaT) {
    var ctx = spec.canvas.getContext("2d");
    var clockWidth = spec.clockWidth;

    //draw static, hands, and icons
		var date = new Date();
		ctx.clearRect(0, 0, canvas.width, canvas.height);
		drawStatic(ctx);

    var seconds = (spec.date.getSeconds()+(deltaT/1000));
    var minutes = (spec.date.getMinutes()+(seconds/60));
		var hours = (spec.date.getHours()+(minutes/60));

		ctx.strokeStyle = "black";
		ctx.lineWidth = 4;
		drawHand(ctx, clockWidth/3, hours * 30);

		ctx.strokeStyle = "black";
		ctx.lineWidth = 2;
		drawHand(ctx, clockWidth/2, minutes * 6);

		ctx.strokeStyle = "red";
		ctx.lineWidth = 1;
    //make the second hand snap wiggle and forth
    var wiggle = Math.floor(seconds)
    var ms = 100 - (deltaT%1000)
    // var dAngle = Math.cos(correction*Math.PI/18)*Math.exp(-.1*correction/2)
    var dAngle = (ms > 0) ? Math.cos(ms*Math.PI*.045)*ms/1000 :0
    drawHand(ctx, clockWidth/2, (wiggle+dAngle) * 6);
    // drawHand(ctx, clockWidth/2, (wiggle) * 6);

    //draw icons
    spec.layout(canvas);
	}

  that.setBuses= function(buses) {
    //buses is an array of buses and their arrival times

      spec.buses = buses

  };
  var date = null;
  that.begin = function(timestamp) {
    console.log("timestamp");
    console.log(timestamp);
    // if (interval !== null) {
    //   window.cancelAnimationFrame(interval);
    // }
    spec.date = spec.date || new Date();

    tick(timestamp);
    // interval = window.setInterval(tick, 1000);
    interval = window.requestAnimationFrame(that.begin)
  }

  return that;
}
</script>

<script>
  var clock = new AnalogClock($("#clock")[0], {
    // buses: upcoming, //[1,2,3],  //upcoming array
    clockWidth:450,
    layout: function(canvas) {
      //'this' is spec in the class
      console.log(this.buses);

      //draw a circle for each bus around the perimeter of the clock
      var ctx = canvas.getContext("2d");
      var centerX = canvas.width / 2;
      var centerY = canvas.height / 2;
      var r = this.clockWidth/2-14;

      //draw circles for each upcoming bus
      //center for each bus dot is: angle is minutes, radius is inside the minute hand length
      this.buses.map(function(icon, index, array) {
        //convert CW minutes into CCW radians
        var minutes = new Date(icon.arrivalTime)
        var angle = Math.PI/2 - (2 * minutes.getMinutes()/ 60 * Math.PI)

        var x = centerX + Math.cos(angle)*r
        var y = centerY - Math.sin(angle)*r  //flip upside down

        console.log(angle + " " + minutes.getMinutes());
        ctx.beginPath()
        ctx.arc(x, y, 10, 0, Math.PI * 2, false)
        ctx.fillStyle = 'blue'
        ctx.fill();
        ctx.closePath();
      })
    }
  });
  clock.begin();


  $.getJSON("/clock/bustime", function(arrivals) {

    var now = new Date();
    $("#updated-at").html(now);

    var timeToArrival = function() {
      //return a function that compares given times with the time this function was created
      return function(arrivalTime) {
        var nownow = now.getTime()
        var arr = new Date(arrivalTime)

        return (arr.getTime() - nownow)/1000/60;
      }
    }();

    var walkToStation = 0;

    var upcoming = arrivals.filter(function(bus) {
      //arrival time exists, greater than time to walk to station, and less than 1 hour
      return (bus.arrivalTime !== null) && (timeToArrival(bus.arrivalTime) > (walkToStation * 60 * 1000)) && (timeToArrival(bus.arrivalTime)<60)
    });

    //create new clock
    //tell it how to show the buses
    clock.setBuses(upcoming);

    //redraw once per second
    // clock.tick();
    // window.setInterval(clock.tick, 1000);


    $("#arrivals").html(
      // if (arrivals.length<0) {
      upcoming.map(function (bus, index, array) {
            return "<li>"+timeToArrival(bus.arrivalTime) + " minutes</li> ("+ bus.distances.PresentableDistance +")";
      })
      .join("\n"));

  });
</script>
